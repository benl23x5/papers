===========================================================================
                          ICFP 2017 Review #124A
---------------------------------------------------------------------------
         Paper #124: Machine Fusion: Merging merges, more or less
---------------------------------------------------------------------------

                      Overall merit: C. Weak paper, though I will not fight
                                        strongly against it
                         Confidence: X. I am an expert in this area

                         ===== Paper summary =====

This paper contributes to the field of stream fusion, which seeks
to improve the performance of programs that manipulate infinite
streams by exploiting program fusion techniques.  The paper extends
the scope of stream fusion by presenting the first such system that
can handle splits, joins and new operators, and formally verifies
the soundness of the system using the Coq proof assistant.

                      ===== Comments to authors =====

General comments:

The subject of the paper is interesting, and the results appear to
be novel and correct.  The new system is based upon the idea of
modelling stream programs using an imperative process calculus,
for which an algorithm is presented for fusing the composition of
two such processes into a single process.  The algorithm does not
always succeed, but if it does is guaranteed to be sound.

Unfortunately, however, the paper is not up to the standard of
the classic fusion papers, which clearly identified a practical
problem, showed how to solve it in an appealing manner, and
demonstrated its use with practical examples.  In particular,
the paper is difficult to follow even for an expert reader, and
raises more questions than it provides answers.  For example:

* How are source programs translated into the process language?

> fixed. Template Haskell.

* Why does a functional source language need to be translated 
  into an imperative intermediate language?

> fixed. Interleaving statements.

* What are the key ideas that make the new approach to stream
  fusion work, and be more general than other approaches?

> fixed. I think this is answered in Breaking it Down
> There is also the point that our fusion system uses global
> knowledge of the program, though this is implied in
> Non-deterministic Execution Order when it talks about the 
> search process.

* How can the new approach be understood from a mathematical
  perspective?  Working this out may help to identify and 
  clarify the essential ideas underlying the approach.

> fixed. Synch product mentioned in related work.

* Is the extended class of examples that the new system can 
  handle of practical importance in real programming?  The
  paper only gives a few, rather contrived examples.

> fixed. Have QuickHull demo now.

* Is there a system that can be downloaded and experimented
  with, which allows users to enter stream programs in source
  form rather than using the intermediate process language?

> fixed. We now have the folderol (ointment) implementation.

There may be good ideas in this work, but the manner in which
it is currently formalised and presented means that it is not
possible to determine its value and importance.  In its present
form, I cannot recommend acceptance for the ICFP conference.

Specific comments:

p1: How would uniquesUnion behave in a lazy language such as 
Haskell?  How far would this go to achieving the desired 
behaviour automatically without further transformation?

> fixed. Mentioned in Breaking it Down.
  Lazy evaluation is pull only.

p1, line 35: It would be worth clarifying that "we only want to
handle the elements of each stream once" is not an intrinsic 
property of the system, but one that is desired.

> retained. "want" implies that the property is desired.

p2, line 11: Replace "we want to" by "we can"?

> retained. as above.

p3, line 38: "and dropped" should be "dropped"

> fixed. Original sentence cut from final version.

p16, A page of operational definitions like this is just as
offputting to the reader as a page full of typing rules!

> partial fix. Rules are now written in a more Haskell-like
> syntax, but there are still a lot of rules. This is intrinsic
> to the system.

p18: Is it possible to formally state when the fusion
algorithm will succeed and when it will fail?

> fixed. The Section on Fusability now says that 
> Fusability is an under-approximation for deadlock freedom
> of the network.


===========================================================================
                          ICFP 2017 Review #124B
---------------------------------------------------------------------------
         Paper #124: Machine Fusion: Merging merges, more or less
---------------------------------------------------------------------------

                      Overall merit: B. OK paper, but I will not champion
                                        it
                         Confidence: Y. I am knowledgeable in this area,
                                        but not an expert

                         ===== Paper summary =====

This paper presents a compiler technique for fusing two single-threaded stream programs into one (in essence, doing compile-time scheduling), as an alternative to running them concurrently and scheduling them dynamically, which has unpredictable performance.  The proposed stream fusion technique, which transforms a dataflow network into a single sequential loop, is more general than existing fusion transformations in that it can handle more kinds of programs, and it does not require unbounded buffers.  The idea is to represent each stream as a state machine and then merge the two machines in a step-by-step fashion, considering pairs of states from each machine being fused, and merging them in a manner that avoids unbounded buffering.  The paper is accompanied by a mechanized proof of the correctness of the transformation (i.e., that the resulting execution order is one that could have occurred in a concurrent run of the original processes).

                      ===== Comments to authors =====

I like that this paper starts right in with a short code example that illustrates the problem that machine fusion addresses.  I especially enjoyed reading section 2, which presents the main ideas of machine fusion informally using that running example.  The prose is lucidly written, with just the right amount of detail (but with forward pointers into later sections of the paper that offer more detail), and the figures are very nicely done.  It was a wise presentational choice to front-load this example in the paper before continuing on to the formalism in section 3.

Since the entire point of fusing processes is to avoid having to deal with the performance tuning of running the original set of processes concurrently and scheduling them dynamically, I think the weakest aspect of the paper is that it has no empirical performance evaluation of code fused using the machine fusion approach compared to the concurrent-process approach.  Surprisingly, not only does the paper have no such evaluation, the paper does not even mention that any implementation (aside from the Coq formalization) exists -- I was surprised when I looked at the supplemental submitted material and discovered a Haskell implementation!  Was this omission intentional?

> fixed. We have the folderol implementation now.

Presentational suggestion: The paper makes the point early and often about how important it is that process execution order can be nondeterministic while remaining deterministic in its output, that there are different correct orders for the fused process, and that the freedom to reorder allows it to pick a particularly efficient order.  That much is clear.  What I wish the paper would do is spill the beans sooner about *how* it goes about picking an efficient order.  We have to wait until page 15 to see that the key idea is to prioritize jumps and defer pulls.  This ought to be explained (in a high-level way) up front.

> fixed. Made this more explicit in S Non-deterministic Execution order. 
> In the semantics, allowing the execution order of processes to be non-deterministic 
> defines a search space where we might find an order that does not require unbounded buffering.

Additional questions/comments for authors:

  - In figure 5, the instructions from `F0` to `F5` are identical to those from `F10` to `F15`, modulo labels.  What should we make of this?  It's interesting enough that it ought to be explained in the paper.  Is there a later optimization that can optimize out the repetition?

> fixed. This is now discussed in S Fused Result.

  - Although I really like the `uniquesUnion` example from the introduction, I have a nitpick: the challenge of scheduling this code hinges on the fact that `sIn1` occurs twice, but couldn't the programmer have easily avoided this by rewriting the second line of the `let` as `sMerged = merge sUnique SIn2`?  The outcome will be the same, since there's a second `group` call later anyway (and with `sMerged = merge sUnique SIn2`, there'll be less work for the second `group` to do).  Maybe the example would be more compelling if the second `group` call were replaced by something else, so that that refactoring wouldn't be an option.

> retained. We could rewrite in this way, but sUnique would still be used twice, so its 
  a similar example. We think the current example is the smallest one that has all the 
  properties that we want to talk about.

  - Although I think I got the high-level idea of what fusion is doing, I found a lot of the pseudocode in section 4 hard to follow.  Some questions:

    - Why is `fusePair`'s return type `Maybe Process`? -- there's no case in the code there where it would not return a Process.  Same question for `tryStepPair` and `tryStep` -- there ought to be an `otherwise Nothing` or suchlike at the end of the code.

> fixed. Changed to use explicit Just/Nothing

    - Why do we write "b \in tryStepPair" -- doesn't `tryStepPair` return a single instruction rather than a set?  Same question for the calls to `tryStep` in the code for `tryStepPair` in figure 12.

> fixed. Changed to match against Just/Nothing.

    - The text describing figure 11 should have a forward pointer to where `channels` is defined in figure 14, as there is for `outlabels`.

> fixed. There are forward refs to it in S Fusion.

    - Is the second occurrence of `Label_1` in the types of `tryStepPair` and `tryStep` a typo?  Should it be `Label_2`?  I don't know what the subscript means.

> fixed. These have been renamed to LabelF ans so on.

    - I took a look at the implementation of `fusePair`, `tryStepPair`, and `tryStep` in the code, and the actual implementation is different enough from the paper's pseudocode that it answered some of my questions while raising others.  I wonder if a better way to present this code would be with a lightly cleaned-up version of the actual Haskell implementation, instead of with pseudocode.

> fixed. The implementation is now more Haskell like, though we use 'match' instead 
  of 'case' because 'case' is also the name of an instruction.

  - At the beginning of 3.1, I was confused why we needed new terminology of "injection" of values into a process when we already had the word "pull".  Would it make sense to say here that injection allows a value on a channel to become pending, after which it can be pulled?

> fixed. Squeezed this into the section on Injection.

  - Did you consider extracting a verified implementation from the Coq formalization?

> nope. Too much work. It's not straightforward to formally prove that the fusion
  algorithm will terminate, though the intuition for it is easy.

Minor presentational issues:

  - p.2: "inspect intermediate representations of the compiler" -> should be "...of the compiled code", right?

> fixed.

  - p.4: "the process will block at instruction `E2`, waiting for the next value to becoming available from `sIn2`" -- in this example, wouldn't it block at `D2`, waiting for a value from `sIn1`?

> fixed. This text was already cut from the current version.

  - p.6, figure 4: I believe the label "pull s2 v2" on the edge from F5 to F6 should be "pull sIn2 v2".

> fixed. 

  - p.6: I think the state labels are wrong in a few sentences.  It should read: "...moving to either `F4` or `F5`, corresponding to `A2` and `A3` respectively.  From state `F4`, the push from `A2` is executed and moves to `F5`, corresponding to `A3`.  Finally, at `F5` the `merge` machine pulls from `sIn2`, moving from `F5` to `F6`, corresponding to `B1` and `C0` respectively."

> fixed. Changed to use phrasing suggesed by reviewer.

  - p.8: "Action" is defined in figure 6 but is not actually used in process definitions (it doesn't show up until 3.1.2).

> retained. This won't fit anywhere else, so needs to stay in this figure, which isn't ideal.

  - p.13: In "Label_S", introduced at the start of section 4, it isn't clear if "S" is a metavariable or if the letter S is just part of the identifier.  Same for "InputState_S".

> fixed. fixed Label_F -> LabelF, InputState_F -> InputStateF etc.


Typos/grammar:

  - p.3: "the first the instruction"

> fixed.

  - p.3: "pulled and then and dropped"

> fixed. Sentence cut from current version.

  - p.6: "the `group` processes output stream" and "the `merge` processes output stream" -> both should say "process's" (or "the output stream of the process")

> fixed. Sentence cut from current version.

  - p.8: "less-then"

> fixed.

  - p.8: "staticaly"

> fixed.

  - p.9: "`drop`s instructions" -> "`drop` instructions"

> fixed.

  - p.9: "suceeds"

> fixed.

  - p.11: "pointed to by the processes `label`" -> again, should be "process's"

> fixed.

  - p.12: missing quotation mark at end of first sentence

> fixed.

  - p.13: "needs receive one"

> fixed. cut from current versoin.

  - p.13: "exiting Label grammar" -> "existing Label grammar"

> fixed.

  - p.13: missing period at end of last sentence

> fixed.

  - p.14: "of joint label to corresponding the instruction"

> fixed.

  - p.18: "`alternatives` example" -> "`alternates` example"

> fixed.

  - p.18: "suceeding"

> fixed.

  - p.19: "walking to towards"

> fixed.

  - p.19: "the source dataflow networks consists of"

> fixed. cut from current version.

  - p.19: "non-interferring"

> fixed.

  - p.20: "has lower number of states" -> "has a lower number..."

> fixed. cut from current version.

  - p.20: "particlar"

> fixed. cut from current version.


===========================================================================
                          ICFP 2017 Review #124C
---------------------------------------------------------------------------
         Paper #124: Machine Fusion: Merging merges, more or less
---------------------------------------------------------------------------

                      Overall merit: B. OK paper, but I will not champion
                                        it
                         Confidence: Z. I am not an expert; my evaluation
                                        is that of an informed outsider

                         ===== Paper summary =====

This paper presents a new approach to fusion transformations, called
machine fusion, for stream programming. In this approach, each stream
operator is represented by an imperative process with a fixed-size
local heap that reads from input streams and writes to output streams.
The fusion transformation then composes two processes into a single
process by sequentializing their execution order. This fusion
transformation provides a general way of composing stream operators
containing splits and joins.

                      ===== Comments to authors =====

The idea of representing stream operators as imperative processes and
defining a fusion transformation on them seems promising. However, the
paper lacks extensive experimental results. The authors should
implement the algorithm and show evaluation results for various
benchmark programs.

> fixed. We now have the folderol imlementation.

Also, I have a question about the machine fusion algorithm.  Since the
fusion transformation sequentializes execution order at compile time,
I wonder whether the authors can give some empirical or formal
evidence that the statically chosen sequentialization order is good.

> The chosen order is good because it works.
> By construction it's guaranteed to not require unbounded buffering.

For example, does the fusion transformation guarantee some good
property when it succeeds? As far as I can see, even if the fusion
succeeds, the composed system can get stuck depending on how the
client uses the system. For instance, in the "uniquesUnion" example,
if the client reads from the "sUnique" stream twice without reading
from "sUnion", then the composed system seems to get stuck. Is that
right? If so, I wonder whether the fusion algorithm can guarantee
non-stuckness under certain conditions.

> The reader seems to be a confused about how the function in the initial
> example might be used in a larger context. Hopefully the new explanation
> in Breaking it Down will help with this.

Or, does the machine fusion transformation always produce better
behaved systems compared to other fusion algorithms? More
specifically, whenever the machine fusion produces a system that gets
stuck under a certain condition, do other fusion algorithms also
produce systems that get stuck under the same condition?

> This is described in S Fusability, as well as the introduction.
> For pipelines the fusion system always succeeds. Our new system
> also handles dataflow graphs with splits and joins. Also added 
> statement that Fusability is an underapprox for deadlock freedom.

